{"version":3,"sources":["components/MentorSelect.js","App.js","serviceWorker.js","index.js"],"names":["MentorSelect","react_default","a","createElement","react_select_esm","defaultValue","this","props","default","options","onChange","handleInputChange","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","provider","auth","GithubAuthProvider","tasks","data","mentors","tasksObj","forEach","task","Object","keys","mentorsArr","App","state","mentor","user","componentDidMount","context","assertThisInitialized","_this","onAuthStateChanged","userName","uid","providerData","fetch","concat","then","res","json","login","toLowerCase","setState","indexOf","localStorage","getItem","signInWithPopup","result","additionalUserInfo","username","toLocaleLowerCase","catch","error","console","log","logout","signOut","e","value","setItem","addColor","taskName","student","undefined","_this2","students","className","onClick","components_MentorSelect","map","label","border","key","style","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35b8921f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass MentorSelect extends Component {\r\n  render() {\r\n    return (\r\n      <Select\r\n        defaultValue={this.props.default}\r\n        options={this.props.options}\r\n        onChange={this.props.handleInputChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nMentorSelect.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  default: PropTypes.object.isRequired,\r\n  handleInputChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MentorSelect;\r\n","import React, { Component } from 'react';\nimport firebase from 'firebase';\nimport MentorSelect from './components/MentorSelect';\nimport './App.css';\nimport data from './main.json';\n\nconst config = {\n  apiKey: 'AIzaSyAu3ENyUMXRWjLDdUefcrAFXblIMolw_lg',\n  authDomain: 'rss-mentor-dashboard-d6f5e.firebaseapp.com',\n  databaseURL: 'https://rss-mentor-dashboard-d6f5e.firebaseio.com',\n  projectId: 'rss-mentor-dashboard-d6f5e',\n  storageBucket: '',\n  messagingSenderId: '568788348514'\n};\n\nfirebase.initializeApp(config);\n\nconst provider = new firebase.auth.GithubAuthProvider();\n\nconst { tasks, mentors } = data;\n\nconst tasksObj = {};\ntasks.forEach(task => {\n  tasksObj[Object.keys(task)] = task[Object.keys(task)];\n});\n\nconst mentorsArr = Object.keys(mentors);\n\nclass App extends Component {\n  state = {\n    mentor: 'aliaksandrzahorski',\n    user: 'stranger'\n  };\n\n  componentDidMount = () => {\n    const context = this;\n    firebase.auth().onAuthStateChanged(function(user) {\n      if (user) {\n        let userName = '';\n        const uid = user.providerData[0].uid;\n        fetch(`https://api.github.com/user/${uid}`)\n          .then(res => res.json())\n          .then(res => {\n            userName = res.login.toLowerCase();\n            if (userName) context.setState({ user: userName });\n          })\n          .then(() => {\n            if (mentorsArr.indexOf(userName) !== -1) {\n              context.setState({ mentor: userName });\n            } else if (localStorage.getItem('mentor')) {\n              context.setState({ mentor: localStorage.getItem('mentor') });\n            }\n          });\n      } else {\n        if (localStorage.getItem('mentor')) {\n          context.setState({ mentor: localStorage.getItem('mentor') });\n        }\n      }\n    });\n  };\n\n  login = () => {\n    const context = this;\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then(function(result) {\n        const userName = result.additionalUserInfo.username.toLocaleLowerCase();\n        if (userName) context.setState({ user: userName });\n        if (mentorsArr.indexOf(userName) !== -1) {\n          context.setState({ mentor: userName });\n        } else if (localStorage.getItem('mentor')) {\n          context.setState({ mentor: localStorage.getItem('mentor') });\n        }\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  };\n\n  logout = () => {\n    const context = this;\n    firebase\n      .auth()\n      .signOut()\n      .then(function() {\n        context.setState({ user: 'stranger' });\n      })\n      .catch(function(error) {\n        console.log('Sign-out error');\n      });\n  };\n\n  handleInputChange = e => {\n    this.setState({ mentor: e.value });\n    localStorage.setItem('mentor', e.value);\n  };\n\n  addColor = (taskName, student) => {\n    const studentData = mentors[this.state.mentor][student];\n    if (studentData[taskName] !== undefined) return 'lightgreen';\n    switch (tasksObj[taskName]) {\n      case 'In Progress':\n        return 'yellow';\n      case 'Checked':\n        return 'crimson';\n      case 'ToDo':\n        return 'lightgrey';\n      case 'Checking':\n        return 'pink';\n      default:\n        return 'pink';\n    }\n  };\n\n  render() {\n    const { mentor } = this.state;\n    const students = Object.keys(mentors[mentor]);\n\n    return (\n      <div className=\"App\">\n        <div>\n          <button onClick={this.login}>Log In</button>\n          <button onClick={this.logout}>Log Out</button>\n        </div>\n        <h3>Hello, {this.state.user}!</h3>\n        <h1>Mentor Dashboard</h1>\n        <div className=\"select-container\">\n          <MentorSelect\n            options={Object.keys(mentors).map(mentor => ({ value: mentor, label: mentor }))}\n            default={{ value: 'default', label: 'please choose mentor github' }}\n            handleInputChange={this.handleInputChange}\n          />\n        </div>\n        <h2>{this.state.mentor}</h2>\n        <table border=\"0\">\n          <thead>\n            <tr>\n              <th>Tasks \\ Students</th>\n              {students.map(student => (\n                <th key={student}>{student}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {tasks.map(task => {\n              const taskName = Object.keys(task)[0];\n              return (\n                <tr key={taskName}>\n                  <td>{taskName}</td>\n                  {students.map(student => (\n                    <td\n                      style={{ backgroundColor: this.addColor(taskName, student) }}\n                      key={taskName + student}\n                    >\n                      {mentors[mentor][student][taskName]}\n                    </td>\n                  ))}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}